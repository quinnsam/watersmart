#!/usr/bin/env python

"""Cleanup fixtures."""

import json
from pathlib import Path
from typing import Any, Final

from bs4 import BeautifulSoup, NavigableString, PageElement


class JSONResponseAnonymizer:
    """JSON response anonymizer to shorten and prettify response object."""

    FIXTURES: Final = ("realtime_api_response.json",)

    def run(self) -> None:
        for fixture in self.FIXTURES:
            path = Path(__file__).parent.parent.joinpath("tests/fixtures", fixture)
            text = path.read_text()
            obj = json.loads(text)
            obj = self._shorten(obj)
            text = json.dumps(obj, indent=4)
            path.write_text(text)

    @classmethod
    def _shorten(cls, obj: dict[str, Any]) -> dict[str, Any]:
        obj["data"]["series"] = obj["data"]["series"][-4:]

        return obj


class WebPageAnonymizer:
    """Web page anonymizer to remove personal info, shorten, and prettify."""

    FIXTURES: Final = (
        "login_success.html",
        "login_error.html",
    )

    def run(self) -> None:
        for fixture in self.FIXTURES:
            path = Path(__file__).parent.parent.joinpath("tests/fixtures", fixture)
            html = path.read_text()
            soup = self._shorten(BeautifulSoup(html, "html.parser"))
            account = soup.find(id="account-navigation")

            if account:
                address = account.find(lambda tag: not tag.get("notranslate"))
                address.string = " 123 N Main St,\n   Bend OR 97701"
                account_number = soup.find("var")
                account_number.string = "1234567-8900"

            soup.smooth()

            path.write_text(soup.prettify())

    @classmethod
    def _shorten(cls, doc: PageElement) -> PageElement:
        stack = [doc]

        while stack:
            node = stack.pop()

            if cls._contains_target(node) or cls._is_target(node):
                if not cls._is_target(node):
                    stack.extend(node.contents)
            else:
                node.extract()

        return doc

    @classmethod
    def _contains_target(cls, node: PageElement) -> bool:
        is_string = isinstance(node, NavigableString)
        has_account = False
        has_errors = False

        if not is_string:
            has_account = node.find(id="account-navigation") is not None
            has_errors = len(node.select(".error-message")) > 0

        return has_account or has_errors

    @classmethod
    def _is_target(cls, node: PageElement) -> bool:
        is_string = isinstance(node, NavigableString)
        is_account = False
        is_errors = False

        if not is_string:
            is_account = node.get("id") == "account-navigation"
            is_errors = "error-message" in node.get("class", "")

        return is_account or is_errors


def main() -> None:
    WebPageAnonymizer().run()
    JSONResponseAnonymizer().run()


if __name__ == "__main__":
    main()
